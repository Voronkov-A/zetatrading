//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using ZetaTrading.Adapters.WebApi.Common;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ZetaTrading.Adapters.WebApi.Journal
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class JournalControllerBase : Microsoft.AspNetCore.Mvc.Controller
    {
        /// <remarks>
        /// Provides the pagination API. Skip means the number of items should be skipped by server. Take means the maximum
        /// <br/>number items should be returned by server. All fields of the filter are optional.
        /// </remarks>
        /// <param name="skip">Skip.</param>
        /// <param name="take">Take.</param>
        /// <param name="body">Filter.</param>
        /// <returns>OK.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api.user.journal.getRange")]
        public abstract System.Threading.Tasks.Task<MRangeOfMJournalInfo> GetRange([Microsoft.AspNetCore.Mvc.FromQuery] int skip, [Microsoft.AspNetCore.Mvc.FromQuery] int take, [Microsoft.AspNetCore.Mvc.FromBody] VJournalFilter body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <remarks>
        /// Returns the information about an particular event by ID.
        /// </remarks>
        /// <param name="id">Id.</param>
        /// <returns>OK.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api.user.journal.getSingle")]
        public abstract System.Threading.Tasks.Task<MJournal> GetSingle([Microsoft.AspNetCore.Mvc.FromQuery] long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    /// <summary>
    /// Filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VJournalFilter
    {
        /// <summary>
        /// From.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? From { get; set; }

        /// <summary>
        /// To.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? To { get; set; }

        /// <summary>
        /// Search.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("search")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Search { get; set; }

    }

    /// <summary>
    /// Journal info range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MRangeOfMJournalInfo
    {
        /// <summary>
        /// Skip.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("skip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Skip { get; set; }

        /// <summary>
        /// Count.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Count { get; set; }

        /// <summary>
        /// Items.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<MJournalInfo> Items { get; set; } = new System.Collections.Generic.List<MJournalInfo>();

    }

    /// <summary>
    /// Journal info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MJournalInfo
    {
        /// <summary>
        /// Id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        /// <summary>
        /// Event id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EventId { get; set; }

        /// <summary>
        /// Created at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

    }

    /// <summary>
    /// Journal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MJournal
    {
        /// <summary>
        /// Text.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }

        /// <summary>
        /// Id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long Id { get; set; }

        /// <summary>
        /// Event id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public long EventId { get; set; }

        /// <summary>
        /// Created at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603